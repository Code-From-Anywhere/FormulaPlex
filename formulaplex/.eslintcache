[{"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/App.tsx":"1","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/Selectors.tsx":"2","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Container.tsx":"3","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Sidebar.tsx":"4","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/ActionTypes.tsx":"5","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/Actions.tsx":"6","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Windows.tsx":"7","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/index.js":"8","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Components/Smart/Piano.tsx":"9","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/Store.tsx":"10","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Types/Types.tsx":"11","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Util/Util.ts":"12","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Components/Dumb/ColorBadge.tsx":"13","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Components/Smart/PatternChannel.tsx":"14","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Hooks/useUpdateWindow.tsx":"15","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Windows/TimedMelodyEditor.tsx":"16","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/Menus.tsx":"17","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/RecordButton.tsx":"18","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/reportWebVitals.js":"19","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Style/Style.tsx":"20","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/Monitor.tsx":"21","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/PeakMeter.tsx":"22","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/PlayActions.tsx":"23","/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/TimeIndicator.tsx":"24"},{"size":25121,"mtime":1608226830202,"results":"25","hashOfConfig":"26"},{"size":2311,"mtime":1608248165212,"results":"27","hashOfConfig":"26"},{"size":1468,"mtime":1608249101041,"results":"28","hashOfConfig":"26"},{"size":13038,"mtime":1608239817355,"results":"29","hashOfConfig":"26"},{"size":438,"mtime":1608248059242,"results":"30","hashOfConfig":"26"},{"size":2712,"mtime":1608248064532,"results":"31","hashOfConfig":"26"},{"size":3188,"mtime":1608246666327,"results":"32","hashOfConfig":"26"},{"size":500,"mtime":1608054282291,"results":"33","hashOfConfig":"26"},{"size":8515,"mtime":1608242573063,"results":"34","hashOfConfig":"26"},{"size":3963,"mtime":1608248081318,"results":"35","hashOfConfig":"26"},{"size":12956,"mtime":1608248257521,"results":"36","hashOfConfig":"26"},{"size":3906,"mtime":1608248255983,"results":"37","hashOfConfig":"26"},{"size":229,"mtime":1608229828170,"results":"38","hashOfConfig":"26"},{"size":4676,"mtime":1608240234405,"results":"39","hashOfConfig":"26"},{"size":857,"mtime":1608244982688,"results":"40","hashOfConfig":"26"},{"size":4031,"mtime":1608242502941,"results":"41","hashOfConfig":"26"},{"size":2801,"mtime":1608249131058,"results":"42","hashOfConfig":"26"},{"size":1505,"mtime":1608248552959,"results":"43","hashOfConfig":"26"},{"size":362,"mtime":1608054282292,"results":"44","hashOfConfig":"26"},{"size":321,"mtime":1608229745149,"results":"45","hashOfConfig":"26"},{"size":70,"mtime":1608248910886,"results":"46","hashOfConfig":"26"},{"size":74,"mtime":1608248928036,"results":"47","hashOfConfig":"26"},{"size":78,"mtime":1608248971619,"results":"48","hashOfConfig":"26"},{"size":82,"mtime":1608248991027,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1mzw3x3",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/App.tsx",["101","102","103","104","105"],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/Selectors.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Container.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Sidebar.tsx",["106","107","108","109","110"],"import { useRef } from \"react\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { BiPlay } from \"react-icons/bi\";\nimport { BsStopFill } from \"react-icons/bs\";\nimport { IoMdAdd } from \"react-icons/io\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Tone from \"tone\";\nimport ColorBadge from \"../Components/Dumb/ColorBadge\";\nimport {\n  actionSetCurrentSynth,\n  actionSetInstruments,\n  actionSetMelodies,\n  actionSetPatternPlayers,\n  actionSetPatterns,\n  actionSetSelectedInstrumentId,\n  actionSetSelectedMelodyId,\n  actionSetSelectedPatternId,\n  actionSetSelectedTimedMelodyId,\n  actionSetTimedMelodies,\n} from \"../Context/Actions\";\nimport {\n  selectCurrentSynth,\n  selectInstruments,\n  selectMelodies,\n  selectPatternPlayers,\n  selectPatterns,\n  selectProjectPitch,\n  selectSelectedInstrumentId,\n  selectSelectedMelodyId,\n  selectSelectedPatternId,\n  selectSelectedTimedMelodyId,\n  selectTimedMelodies,\n} from \"../Context/Selectors\";\nimport Style from \"../Style/Style\";\nimport {\n  defaultSynthOptions,\n  Instrument,\n  Melody,\n  Pattern,\n  PatternPlayer,\n  PatternPlayersPerPattern,\n  Sample,\n  SynthTypes,\n  synthTypes,\n  TimedMelody,\n} from \"../Types/Types\";\nimport {\n  Constants,\n  generateColor,\n  generateId,\n  generatePatternPlayerArray,\n  generateSynth,\n  startPlayPattern,\n} from \"../Util/Util\";\n\nconst Sidebar = () => {\n  const selectInstrumentRef = useRef<HTMLSelectElement | null>(null);\n\n  const dispatch = useDispatch();\n\n  const currentSynth = useSelector(selectCurrentSynth);\n  const setCurrentSynth = (sample: Sample) =>\n    dispatch(actionSetCurrentSynth(sample));\n  const setInstruments = (instruments: Instrument[]) =>\n    dispatch(actionSetInstruments(instruments));\n\n  const instruments = useSelector(selectInstruments);\n\n  const setTimedMelodies = (timedMelodies: TimedMelody[]) =>\n    dispatch(actionSetTimedMelodies(timedMelodies));\n\n  const projectPitch = useSelector(selectProjectPitch);\n  const setPatternPlayers = (patternPlayers: PatternPlayersPerPattern) =>\n    dispatch(actionSetPatternPlayers(patternPlayers));\n\n  const setPatterns = (patterns: Pattern[]) =>\n    dispatch(actionSetPatterns(patterns));\n\n  const setSelectedMelodyId = (id: string | null) =>\n    dispatch(actionSetSelectedMelodyId(id));\n\n  const setSelectedTimedMelodyId = (id: string | null) =>\n    dispatch(actionSetSelectedTimedMelodyId(id));\n\n  const setSelectedPatternId = (id: string | null) =>\n    dispatch(actionSetSelectedPatternId(id));\n\n  const setSelectedInstrumentId = (id: string | null) =>\n    dispatch(actionSetSelectedInstrumentId(id));\n\n  const setMelodies = (melodies: Melody[]) =>\n    dispatch(actionSetMelodies(melodies));\n  const timedMelodies = useSelector(selectTimedMelodies);\n  const melodies = useSelector(selectMelodies);\n  const patterns = useSelector(selectPatterns);\n  const selectedInstrumentId = useSelector(selectSelectedInstrumentId);\n  const selectedPatternId = useSelector(selectSelectedPatternId);\n  const selectedMelodyId = useSelector(selectSelectedMelodyId);\n  const selectedTimedMelodyId = useSelector(selectSelectedTimedMelodyId);\n  const patternPlayers = useSelector(selectPatternPlayers);\n\n  const newInstrument = (soundString: SynthTypes) => {\n    const defaults = defaultSynthOptions[soundString];\n    const synth = generateSynth(soundString, defaults);\n\n    currentSynth.sample.dispose();\n    setCurrentSynth({ sample: synth, type: soundString });\n\n    const newInstrument: Instrument = {\n      id: generateId(),\n      type: soundString,\n      name: null,\n      color: generateColor(),\n      properties: defaults,\n    };\n\n    setInstruments([...instruments, newInstrument]);\n  };\n\n  const addTimedMelody = (melody: Melody) => {\n    const newTimedMelody: TimedMelody = {\n      defaultDuration: 1,\n      pitch: 4,\n      id: generateId(),\n      color: generateColor(),\n      melodyId: melody.id,\n      name: null,\n      timedMelody: melody.melody.map((key, index) => ({\n        ...key,\n        startPosition: index,\n      })),\n    };\n\n    setTimedMelodies([...timedMelodies, newTimedMelody]);\n  };\n\n  const renderMelodies = (\n    <div>\n      <p style={{ fontWeight: \"bold\" }}>Melodies:</p>\n\n      {melodies.map((melody, index) => {\n        const filteredTimedMelodies = timedMelodies.filter(\n          (t) => t.melodyId === melody.id\n        );\n\n        const isSelected = selectedMelodyId === melody.id;\n        return (\n          <div>\n            <div\n              onClick={() => {\n                setSelectedMelodyId(isSelected ? null : melody.id);\n              }}\n              style={{\n                border: isSelected ? \"1px dotted black\" : undefined,\n                borderRadius: 3,\n                padding: 3,\n              }}\n            >\n              {melody.name || `Melody ${index}`}\n              <BiPlay\n                size={Constants.ICON_SIZE}\n                onClick={async () => {\n                  // for (const { note, modifier } of melody.melody) {\n                  //   setCurrentKey({ note, modifier });\n                  //   await timeout(250);\n                  //   setCurrentKey(null);\n                  //   await timeout(250);\n                  // }\n                  //do this with Tone.Transport\n                }}\n              />\n              <AiFillDelete\n                size={Constants.ICON_SIZE}\n                onClick={() => {\n                  setMelodies(melodies.filter((melody, i) => i !== index));\n                }}\n              />\n\n              <IoMdAdd\n                size={Constants.ICON_SIZE}\n                onClick={() => {\n                  addTimedMelody(melody);\n                }}\n              />\n            </div>\n            {filteredTimedMelodies && (\n              <div>\n                {filteredTimedMelodies.map((timedMelody, index) => {\n                  const isSelected = timedMelody.id === selectedTimedMelodyId;\n                  return (\n                    <div\n                      key={`${timedMelody.id}timedMelody`}\n                      onClick={() =>\n                        selectedTimedMelodyId === timedMelody.id\n                          ? setSelectedTimedMelodyId(null)\n                          : setSelectedTimedMelodyId(timedMelody.id)\n                      }\n                      style={{\n                        border: isSelected ? \"1px dotted black\" : undefined,\n                        borderRadius: 3,\n                        padding: 3,\n                        marginLeft: 20,\n                      }}\n                    >\n                      {timedMelody.name || `Timed melody ${index}`}\n\n                      <BiPlay\n                        size={Constants.ICON_SIZE}\n                        onClick={async () => {\n                          for (const {\n                            note,\n                            modifier,\n                            duration,\n                            startPosition,\n                          } of timedMelody.timedMelody) {\n                            // Make Tone.Transport that plays the melody in a loop\n                            // setCurrentKey({ note, modifier });\n                            // await timeout(\n                            //   duration !== undefined\n                            //     ? duration\n                            //     : timedMelody.defaultDuration\n                            // );\n                            // setCurrentKey(null);\n                            // await timeout(\n                            //   pauseEnd !== undefined\n                            //     ? pauseEnd\n                            //     : timedMelody.defaultPause\n                            // );\n                          }\n                        }}\n                      />\n                      <AiFillDelete\n                        size={Constants.ICON_SIZE}\n                        onClick={() => {\n                          setSelectedTimedMelodyId(null);\n                          setTimedMelodies(\n                            timedMelodies.filter((t, i) => i !== index)\n                          );\n                        }}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n  const renderRythms = (\n    <div>\n      <p style={{ fontWeight: \"bold\" }}>Rythms:</p>\n      <p>\n        Coming soon. Rythms are songs to automatically generate TimedMelodies\n      </p>\n    </div>\n  );\n\n  const renderPatterns = (\n    <div>\n      <p style={{ fontWeight: \"bold\" }}>Patterns:</p>\n      {patterns.map((pattern) => {\n        const isSelected = pattern.id === selectedPatternId;\n        const ourPatternPlayer = !!patternPlayers[pattern.id];\n        return (\n          <div\n            onClick={() => setSelectedPatternId(pattern.id)}\n            key={`pattern${pattern.id}`}\n            style={Style.itemStyle(isSelected)}\n          >\n            {pattern.name}{\" \"}\n            {ourPatternPlayer ? (\n              <BsStopFill\n                key={`stopIcon${pattern.id}${ourPatternPlayer}`}\n                size={Constants.ICON_SIZE}\n                onClick={() => {\n                  // always first stop before diposing.\n                  Tone.Transport.stop(0);\n                  patternPlayers[pattern.id]?.map((patternPlayer) => {\n                    patternPlayer.sample.dispose();\n                  });\n\n                  const newPatternPlayers = { ...patternPlayers }; //NB: Make sure dat dit geen memory leak veroorzaakt\n                  delete newPatternPlayers[pattern.id];\n\n                  console.log(\"newPatternPlayers\", newPatternPlayers);\n                  setPatternPlayers(newPatternPlayers);\n                }}\n              />\n            ) : (\n              <BiPlay\n                key={`playIcon${pattern.id}${ourPatternPlayer}`}\n                size={Constants.ICON_SIZE}\n                onClick={() => {\n                  if (projectPitch) {\n                    const patternPlayerArray = generatePatternPlayerArray(\n                      pattern.channels,\n                      instruments,\n                      timedMelodies\n                    );\n                    const array = patternPlayerArray as PatternPlayer[];\n                    setPatternPlayers({\n                      ...patternPlayers,\n                      [pattern.id]: array,\n                    });\n                    startPlayPattern(array, projectPitch, 1, true);\n                  }\n                }}\n              />\n            )}\n            <AiFillDelete\n              size={Constants.ICON_SIZE}\n              onClick={() => {\n                setPatterns(patterns.filter((f) => f.id !== pattern.id));\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  const renderSongs = (\n    <div>\n      <p style={{ fontWeight: \"bold\" }}>Songs:</p>\n      <p>Coming soon. Formulas are a combination of patterns on a timeline.</p>\n    </div>\n  );\n\n  const renderCompositions = (\n    <div>\n      <p style={{ fontWeight: \"bold\" }}>Compositions:</p>\n      <p>\n        Coming soon. Compositions are the grammar of a song, the underlying\n        structure. Compositions can be used to automatically generate songs.\n      </p>\n    </div>\n  );\n\n  const renderInstruments = (\n    <div>\n      <p style={{ fontWeight: \"bold\" }}>Instruments:</p>\n\n      <select\n        ref={selectInstrumentRef}\n        onChange={(e) => {\n          if (e.target.value !== \"new\") {\n            newInstrument(e.target.value as SynthTypes);\n            if (selectInstrumentRef.current) {\n              selectInstrumentRef.current.value = \"new\";\n            }\n          }\n        }}\n      >\n        <option value=\"new\">New</option>\n        {synthTypes.map((type) => (\n          <option key={`selectSynth${type}`} value={type}>\n            {type}\n          </option>\n        ))}\n      </select>\n      {instruments.map((instrument, index) => {\n        const isSelected = selectedInstrumentId === instrument.id;\n        return (\n          <div\n            key={`instrument${index}`}\n            onClick={() => {\n              setSelectedInstrumentId(instrument.id);\n              currentSynth.sample.dispose();\n\n              setCurrentSynth({\n                sample: generateSynth(instrument.type, instrument.properties),\n                type: instrument.type,\n              });\n            }}\n            style={Style.itemStyle(isSelected)}\n          >\n            <ColorBadge color={instrument.color} />\n\n            {instrument.name || `Instrument ${index}`}\n            <AiFillDelete\n              size={Constants.ICON_SIZE}\n              onClick={() => {\n                setInstruments(\n                  instruments.filter((p) => p.id !== instrument.id)\n                );\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n  return (\n    <div>\n      {renderMelodies}\n      {renderRythms}\n      {renderCompositions}\n      {renderInstruments}\n      {renderPatterns}\n      {renderSongs}\n    </div>\n  );\n};\n\nexport default Sidebar;\n",["111","112"],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/ActionTypes.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/Actions.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Windows.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/index.js",[],["113","114"],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Components/Smart/Piano.tsx",["115","116"],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Context/Store.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Types/Types.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Util/Util.ts",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Components/Dumb/ColorBadge.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Components/Smart/PatternChannel.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Hooks/useUpdateWindow.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Windows/TimedMelodyEditor.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/Menus.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/RecordButton.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/reportWebVitals.js",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Style/Style.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/Monitor.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/PeakMeter.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/PlayActions.tsx",[],"/Users/wijnandkarsens/Documents/Tone.js/formulaplex/src/Layout/Toolbar/TimeIndicator.tsx",[],{"ruleId":"117","severity":1,"message":"118","line":233,"column":29,"nodeType":"119","messageId":"120","endLine":233,"endColumn":33},{"ruleId":"117","severity":1,"message":"121","line":234,"column":29,"nodeType":"119","messageId":"120","endLine":234,"endColumn":37},{"ruleId":"117","severity":1,"message":"122","line":235,"column":29,"nodeType":"119","messageId":"120","endLine":235,"endColumn":37},{"ruleId":"117","severity":1,"message":"123","line":236,"column":29,"nodeType":"119","messageId":"120","endLine":236,"endColumn":42},{"ruleId":"124","severity":1,"message":"125","line":644,"column":67,"nodeType":"126","messageId":"127","endLine":644,"endColumn":69},{"ruleId":"117","severity":1,"message":"118","line":211,"column":29,"nodeType":"119","messageId":"120","endLine":211,"endColumn":33},{"ruleId":"117","severity":1,"message":"121","line":212,"column":29,"nodeType":"119","messageId":"120","endLine":212,"endColumn":37},{"ruleId":"117","severity":1,"message":"122","line":213,"column":29,"nodeType":"119","messageId":"120","endLine":213,"endColumn":37},{"ruleId":"117","severity":1,"message":"123","line":214,"column":29,"nodeType":"119","messageId":"120","endLine":214,"endColumn":42},{"ruleId":"124","severity":1,"message":"125","line":280,"column":67,"nodeType":"126","messageId":"127","endLine":280,"endColumn":69},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":83,"column":6,"nodeType":"134","endLine":83,"endColumn":8,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"136","line":109,"column":6,"nodeType":"134","endLine":116,"endColumn":4,"suggestions":"137"},"@typescript-eslint/no-unused-vars","'note' is assigned a value but never used.","Identifier","unusedVar","'modifier' is assigned a value but never used.","'duration' is assigned a value but never used.","'startPosition' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentKeys' and 'setCurrentKeys'. Either include them or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has missing dependencies: 'currentSynth.sample', 'isRecordingMelody', 'projectPitch', 'recordingMelody', and 'setRecordingMelody'. Either include them or remove the dependency array.",["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [currentKeys, setCurrentKeys]",{"range":"146","text":"147"},"Update the dependencies array to be: [currentKeys, currentSynth.sample, isRecordingMelody, projectPitch, recordingMelody, setRecordingMelody]",{"range":"148","text":"149"},[2689,2691],"[currentKeys, setCurrentKeys]",[3425,3549],"[currentKeys, currentSynth.sample, isRecordingMelody, projectPitch, recordingMelody, setRecordingMelody]"]